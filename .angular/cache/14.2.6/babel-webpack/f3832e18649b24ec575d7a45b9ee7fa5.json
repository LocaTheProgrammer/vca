{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\n\nfunction SearchComponent_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 2);\n    i0.ɵɵpipe(1, \"json\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, item_r1));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r1[ctx_r0.objProperty], \" \");\n  }\n}\n\nexport let SearchComponent = /*#__PURE__*/(() => {\n  class SearchComponent {\n    constructor() {\n      this.onChange = () => {};\n\n      this.onTouch = () => {};\n    }\n\n    setDisabledState(isDisabled) {\n      throw new Error('Method not implemented.');\n    }\n\n    writeValue(value) {\n      // console.log('writeValue');\n      this.user = value;\n    } // upon UI element value changes, this method gets triggered\n\n\n    registerOnChange(fn) {\n      // console.log('registerOnChange');\n      this.onChange = fn;\n    } // upon touching the element, this method gets triggered\n\n\n    registerOnTouched(fn) {\n      // console.log('registerOnTouched');\n      this.onTouch = fn;\n    }\n\n    set userSelected(val) {\n      this.user = val;\n      this.onChange(val);\n      this.onTouch(val);\n    }\n\n  }\n\n  SearchComponent.ɵfac = function SearchComponent_Factory(t) {\n    return new (t || SearchComponent)();\n  };\n\n  SearchComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SearchComponent,\n    selectors: [[\"app-search\"]],\n    inputs: {\n      objProperty: \"objProperty\",\n      list: \"list\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SearchComponent),\n      multi: true\n    }])],\n    decls: 2,\n    vars: 2,\n    consts: [[3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n    template: function SearchComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"select\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function SearchComponent_Template_select_ngModelChange_0_listener($event) {\n          return ctx.userSelected = $event;\n        });\n        i0.ɵɵtemplate(1, SearchComponent_option_1_Template, 3, 4, \"option\", 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.userSelected);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.list);\n      }\n    },\n    dependencies: [i1.NgForOf, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgModel, i1.JsonPipe]\n  });\n  return SearchComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}